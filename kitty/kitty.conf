# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Fonts {{{
font_family      Victor Mono SemiBold Nerd Font Complete Windows Compatible
bold_font        Victor Mono Bold Nerd Font Complete Windows Compatible 
italic_font      Victor Mono Italic Nerd Font Complete Windows Compatible
bold_italic_font Victor Mono Bold Italic Nerd Font Complete Windows Compatible
font_size 11.0
disable_ligatures never
#: }}}

#: Cursor customization {{{
cursor_shape beam
cursor_blink_interval 0
#: }}}

#: Performance tuning {{{

repaint_delay 10

#: Delay (in milliseconds) between screen updates. Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS you have to either
#: set sync_to_monitor to no or use a monitor with a high refresh
#: rate. Also, to minimize latency when there is pending input to be
#: processed, repaint_delay is ignored.

# input_delay 3

#: Delay (in milliseconds) before input from the program running in
#: the terminal is processed. Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.

# sync_to_monitor yes

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents tearing (https://en.wikipedia.org/wiki/Screen_tearing)
#: when scrolling. However, it limits the rendering speed to the
#: refresh rate of your monitor. With a very high speed mouse/high
#: keyboard repeat rate, you may notice some slight input latency. If
#: so, set this to no.

#: }}}

#: Terminal bell {{{
enable_audio_bell no
visual_bell_duration 0.0
#: }}}

#: Window layout {{{
remember_window_size  no
#: }}}

#: Color scheme {{{
background_opacity 0.8
include ~/.cache/wal/colors-kitty.conf
#: }}}

#: Advanced {{{
allow_remote_control yes
#: Allow other programs to control kitty. If you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc.  Note that this even works over ssh
#: connections. You can chose to either allow any program running
#: within kitty to control it, with yes or only programs that connect
#: to the socket specified with the kitty --listen-on command line
#: option, if you use the value socket-only. The latter is useful if
#: you want to prevent programs running on a remote computer over ssh
#: from controlling kitty.
#: }}}

#: Window management {{{

#: You can open a new window running an arbitrary program, for
#:     map kitty_mod+y      launch mutt
#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    launch --cwd=current
#: You can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: Any programs running in that window will be allowed to control
#: kitty. For example::
#:     map ctrl+enter launch --allow-remote-control some_program
#: You can open a new window next to the currently active window or as
#: the first window, with::
#:     map ctrl+n launch --location=neighbor some_program
#:     map ctrl+f launch --location=first some_program
#: }}}
